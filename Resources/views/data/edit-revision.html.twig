{% extends '@EMSCore/base.html.twig' %}{% trans_default_domain 'EMSCoreBundle' %}



{% block title %}
	{%- if revision.labelField -%}
		Edit the {{ revision.contentType.singularName }}: "{{ revision.labelField }}"
    {%- elseif revision.contentType.labelField and attribute(revision.rawData, revision.contentType.labelField) is defined -%}
		Edit the {{ revision.contentType.singularName }}: "{{ attribute(revision.rawData, revision.contentType.labelField) }}"
    {%- elseif revision.ouuid -%}
		Edit the {{ revision.contentType.singularName }}: "{{ revision.ouuid }}"
	{%- else -%}
		{{ revision.contentType.singularName }}: new draft
	{%- endif -%}
{% endblock %}

{% block pagetitle %}
    {%- if revision.labelField -%}
		Edit the {{ revision.contentType.singularName }}: "{{ revision.labelField }}"
    {%- elseif revision.contentType.labelField and attribute(revision.rawData, revision.contentType.labelField) is defined -%}
		Edit the {{ revision.contentType.singularName }}: "{{ attribute(revision.rawData, revision.contentType.labelField) }}"
    {%- elseif revision.ouuid -%}
		Edit the {{ revision.contentType.singularName }}: "{{ revision.ouuid }}"
    {%- else -%}
        {{ revision.contentType.singularName }}: new draft
    {%- endif -%}
{% endblock %}

{% block subtitle %}<small>Working area</small>{% endblock %}


{% block body %}
	{% if not revision.draft %}
		<div class="alert alert-warning">
        	<button type="button" class="close" data-dismiss="alert" aria-hidden="true">Ã—</button>
            <h4><i class="icon fa fa-ban"></i> Alert!</h4>
                You are editing an already publish revision. Are you sure that is a good idea?
			Is not a better idea to create a draft:
            {% include '@EMSCore/elements/post-button.html.twig' with {
							'url': path('revision.new-draft', {'ouuid': revision.ouuid, 'type': revision.contentType.name }),
							'label': 'Edit draft', 
							'icon': 'pencil' }%} .
        </div>
	{% endif %}

<div class="box box-primary">
	<div class="box-header with-border">
		<h3 class="box-title text-{{ revision.contentType.color }}"><i class="{% if revision.contentType.icon %}{{ revision.contentType.icon }} {% else %} fa fa-question {% endif %} "></i>&nbsp;&nbsp;&nbsp;{{ revision.contentType.singularName }}</h3>
	</div>
	<!-- /.box-header -->
	<!-- form start -->
		{{ form_start(form) }}
		<div class="box-body">
    	    {{- form_errors(form) -}}
    	    {{- form_errors(form.data) -}}
    	    
			{{ form_widget(form.data) }}
		</div>
		<!-- /.box-body -->
		<div class="box-footer">
			<div class="btn-group">
				{{ form_widget(form.save) }}
				{% if form.copy is defined %}
				    {{ form_widget(form.copy) }}
				{% endif %}
				{% if form.paste is defined %}
				    {{ form_widget(form.paste) }}
				{% endif %}
                {% include '@EMSCore/elements/post-button.html.twig' with {
					'url': path('revision.cancel', {'revision': revision.id}),
					'message': 'Cancel last modifications ?',
					'label': 'Cancel',
					'icon': 'remove'
				}%}
			</div>
			<div class="btn-group">
				{% if revision.draft %}
					{{ form_widget(form.publish) }}
                    {% include '@EMSCore/elements/post-button.html.twig' with {
						'url': path('revision.discard', {'revisionId': revision.id, 'type': revision.contentType.name}),
						'message': 'Discard this draft ?',
						'label': 'Discard draft',
						'icon': 'trash'
					}%}
				{% else %}
				{% endif %}
			</div>
		</div>
		{{ form_end(form) }}
		

		
		
</div>

{% endblock %}


{% block javascripts %}
<script src="{{ asset('bundles/emscore/js/Sha1.js') }}"></script>
<script src="{{ asset('bundles/emscore/js/FileUploader.js') }}"></script>
<script src="{{ asset('bundles/emscore/bower/ace-builds/src-min-noconflict/ace.js') }}"></script>

<script type="text/javascript">

var waitingResponse = false;
var synchAtTheEnd = true;


$("form[name={{ form.vars.id }}]").submit(function( event ) {
	//disable autosave
	waitingResponse = true;
	synch = true;
});

function updateChoiceFieldTypes()
{
    $('.ems-choice-field-type').each(function(){
        var choice = $(this);
        var collectionName = choice.data('linked-collection');
        if(collectionName)
        {

            $('.collection-panel').each(function()
            {
                var collectionPanel = $(this);
                if(collectionPanel.data('name') === collectionName)
                {
                    var collectionLabelField = choice.data('collection-label-field');

                    collectionPanel.children('.panel-body').children('.collection-panel-container').children('.collection-item-panel').each(function(){

                        var collectionItem = $(this);
                        var index = collectionItem.data('index');
                        var id = collectionItem.data('id');
                        var label = ' #'+index;
                        if(collectionLabelField)
                        {
                            label += ': '+$('#'+id+'_'+collectionLabelField).val();
                        }

                        var multiple = choice.data('multiple');
                        var expanded = choice.data('expanded');

                        if(expanded)
                        {
                            var option = choice.find('input[value="'+index+'"]');
                            if(option.length)
                            {
                                var parent = option.closest('.checkbox,.radio');
                                if($('#'+id+'__ems_internal_deleted').val() === 'deleted'){
									parent.hide();
                                    option.addClass('input-to-hide');
									if(multiple)
									{
                                        option.attr('checked', false);
                                    }
                                    else
									{
                                        option.removeAttr("checked");
									}
                                }
                                else{
                                    option.removeClass('input-to-hide');
                                    parent.find('.checkbox-radio-label-text').text(label);
                                    parent.show();
                                }
                            }
                        }
                        else
						{
                            var option = choice.find('option[value="'+index+'"]');
                            if(option.length)
							{
                                if($('#'+id+'__ems_internal_deleted').val() === 'deleted')
                                {
                                    option.addClass('input-to-hide');
                                }
                                else
								{
                                    option.removeClass('input-to-hide');
                                    option.show();
                                    option.text(label);
								}

							}
						}

                    })
                }

            });

        }

        $(this).find('option.input-to-hide').hide();
        $(this).find('.input-to-hide').each(function(){
			$(this).closest('.checkbox,.radio').hide();
		})
    });
}


function onFormChange(event = null, allowAutoPublish = false){
    {% if not revision.draft %}
    	return;
    {% endif %}

	{% if revision.contentType.autoPublish %}
		if(!allowAutoPublish) {
		    console.log('The auto-save is deactivated!');
		    return;
		}
	{% endif %}

		synch = false;

    	updateChoiceFieldTypes();


		if(waitingResponse){
			return;
			//abort the request migth be an option, but it overload the server
// 			waitingResponse.abort();
		}

		synch = true;
		//update ckeditor's textareas
		for (var i in CKEDITOR.instances) {
	        CKEDITOR.instances[i].updateElement();
		}
		
		waitingResponse = ajaxRequest.post("{{ path('revision.ajaxupdate', { revisionId: revision.id }) }}", $("form[name={{ form.vars.id }}]").serialize())
		  .success(function(response) {
			  $('.has-error').removeClass('has-error');
			  $('span.help-block').remove();
			  
			  $(response.formErrors).each(function(index, item){

				  var target = item.propertyPath;
				  if($('#'+item.propertyPath+'_value').length){
					  target = item.propertyPath+'_value';
				  }

				  if($('#'+target+'__label').length) {

					  $('#'+target+'__label').addClass('has-error');
					  if(item.message && $('#'+target+'__error').length > 0) {
						  $('#'+target+'__error').addClass('has-error');
						  if($('#'+target+'__error span.help-block').length == 0){
							  $('#'+target+'__error').append('<span class="help-block"><ul class="list-unstyled"></ul></span>');
						  }
						  $('#'+target+'__error'+' span.help-block ul.list-unstyled').append('<li><span class="glyphicon glyphicon-exclamation-sign"></span> '+item.message+'</li>');
					  }
				  }
				  else {
					  $('#'+target).parents('.form-group').addClass('has-error');
					  if(item.message) {
						  if($('#'+target).parents('.form-group').find(' span.help-block').length == 0){
							  $('#'+target).parent('.form-group').append('<span class="help-block"><ul class="list-unstyled"><li><span class="glyphicon glyphicon-exclamation-sign"></span> '+item.message+'</li></ul></span>');
						  }
						  else {
    			  			  $('#'+target).parents('.form-group').find(' span.help-block ul.list-unstyled').append('<li><span class="glyphicon glyphicon-exclamation-sign"></span> '+item.message+'</li>');							  
    			  		  }
					  }
				  }
				  
			  });
		  })
		  .always(function() {
			  waitingResponse = false;
			  if(!synch){
				  onFormChange();
			  }
		});
}

function attachObjectPicker(domId) {

	$('#'+domId).find('.cke_dialog_ui_input_select').css('width', '100%');
	$('#'+domId).find('.cke_dialog_ui_input_select').css('z-index', '20000');
	$('#'+domId).find('select').select2({
		ajax: {
			url: '{{ path("elasticsearch.api.search") }}',
	    	dataType: 'json',
	    	delay: 250,
	    	data: function (params) {
	      		return {
		        q: params.term, // search term
		        page: params.page,
		        environment: environment,
		        type: type
		      };
		    },
			processResults: function (data, params) {
				// parse the results into the format expected by Select2
				// since we are using custom formatting functions we do not need to
				// alter the remote JSON data, except to indicate that infinite
				// scrolling can be used
				params.page = params.page || 1;
		
		      	return {
			        results: data.items,
			        pagination: {
			          more: (params.page * 30) < data.total_count
			        }
		      	};
	    	},
	    	cache: true
	  	},
	  	//escapeMarkup: function (markup) { return markup; }, // let our custom formatter work
	  	//templateResult: formatRepo, // omitted for brevity, see the source of this page
	  	//templateSelection: formatRepoSelection, // omitted for brevity, see the source of this page
	  	minimumInputLength: 1
	});
}

function initFileUploader(fileHandler, container){


	var sha1Input = $(container).find(".sha1");
	var typeInput = $(container).find(".type");
	var nameInput = $(container).find(".name");
	var progressBar = $(container).find(".progress-bar");
	var progressText = $(container).find(".progress-text");
	var progressNumber = $(container).find(".progress-number");
	var viewButton = $(container).find(".view-asset-button");
	var clearButton = $(container).find(".clear-asset-button");
	var previewTab = $(container).find(".asset-preview-tab");
	var uploadTab = $(container).find(".asset-upload-tab");
	var previewLink = $(container).find(".img-responsive");
	var assetHashSignature = $(container).find(".asset-hash-signature");
	var dateInput = $(container).find(".date");
	var authorInput = $(container).find(".author");
	var languageInput = $(container).find(".language");
	var contentInput = $(container).find(".content");
	var titleInput = $(container).find(".title");
	

	previewTab.hide();
	uploadTab.show();
	
    var fileUploader = new FileUploader({
    	file: fileHandler,
    	onSha1Available: function(sha1, type, name){
    			$(sha1Input).val(sha1);
    			$(assetHashSignature).empty().append(sha1);
	    		$(typeInput).val(type);
	    		$(nameInput).val(name);
	    		$(dateInput).val('');
	    		$(authorInput).val('');
	    		$(languageInput).val('');
	    		$(contentInput).val('');
	    		$(titleInput).val('');
	    		$(viewButton).addClass('disabled');
	    		$(clearButton).addClass('disabled');
	    },
	    onProgress: function(status, progress, remaining){
		    if(status !== 'Computing sha1' && $(sha1Input).val() !== fileUploader.sha1){
        		$(sha1Input).val(fileUploader.sha1);
        		console.log('Sha1 missmatch!');
		    }
		    var pourcent = Math.round(progress*100);
	    		$(progressBar).css('width', pourcent+'%');
	    		$(progressText).html(status);
	    		$(progressNumber).html(remaining);
	    		if(pourcent == 100){
    	    		viewButton.removeClass("disabled");
    	    		clearButton.removeClass("disabled");

    	    		var urlPattern = previewLink.data('src')
    	    			.replace(/_asset_hash_/g, encodeURIComponent($(sha1Input).val()))
    	    			.replace(/_asset_mimetype_/g, encodeURIComponent($(typeInput).val()))
    	    			.replace(/_asset_name_/g, encodeURIComponent($(nameInput).val()));

    	    		previewLink.attr('src', urlPattern);
    	    		
    	    		previewTab.show();
    	    		uploadTab.hide();

					if($(contentInput).length) {
						FileDataExtrator(container);
					}
					else {
        	    		onFormChange();
					}
    	    		
		    	}
	    },
	    onError: function(message, code){
	    		$(progressBar).css('width', '0%');
	    		$(progressText).html(message);
	    		$(progressNumber).html('Error code : '+code);
	    		$(sha1Input).val('');
	    		$(assetHashSignature).empty();
	    		$(typeInput).val('');
	    		$(nameInput).val('');
	    		$(dateInput).val('');
	    		$(authorInput).val('');
	    		$(languageInput).val('');
	    		$(contentInput).val('');
	    		$(titleInput).val('');
	    		$(viewButton).addClass('disabled');
	    		$(clearButton).addClass('disabled');
	    },
	});
}


//file selection
function FileSelectHandler(e) {

	// cancel event and hover styling
	FileDragHover(e);

	// fetch FileList object
	var files = e.target.files || e.dataTransfer.files;

	// process all File objects
	for (var i = 0, f; f = files[i]; i++) {
		initFileUploader(f, this);
		break;
	}

}


//file data extractor
function FileDataExtrator(container) {

	var sha1Input = $(container).find(".sha1");
	var nameInput = $(container).find(".name");

	var dateInput = $(container).find(".date");
	var authorInput = $(container).find(".author");
	var languageInput = $(container).find(".language");
	var contentInput = $(container).find(".content");
	var titleInput = $(container).find(".title");


    var progressText = $(container).find(".progress-text");
    var progressNumber = $(container).find(".progress-number");
    var previewTab = $(container).find(".asset-preview-tab");
    var uploadTab = $(container).find(".asset-upload-tab");

    var urlPattern = file_extract_url
    	.replace(/__file_identifier__/g, $(sha1Input).val())
    	.replace(/__file_name__/g, $(nameInput).val());



    $(progressText).html('Extracting information from asset...');
    $(progressNumber).html('');
    uploadTab.show();
    previewTab.hide();

	waitingResponse = ajaxRequest.get(urlPattern)
		.success(function(response) {
			$(dateInput).val(response.date);
			$(authorInput).val(response.author);
			$(languageInput).val(response.language);
			$(contentInput).val(response.content);
			$(titleInput).val(response.title);
		})
		.fail(function() {
			$($('#modal-notifications').find('.modal-body')).html('Something went wrong while extrating information from file');
			$('#modal-notifications').modal('show');
		})
		.always(function() {
            $(progressText).html('');
			uploadTab.hide();
			previewTab.show();
	});
    
}

//file drag hover
function FileDragHover(e) {
	e.stopPropagation();
	e.preventDefault();
	//e.target.className = (e.type == "dragover" ? "hover" : "");
}

function addEventListeners(target){


	target.find(".file-uploader-input").fileinput({
		'showUpload':false, 
		'showCaption': false,
		'showPreview': false,
		'showRemove': false,
		'showCancel': false,
		'showClose': false,
		'browseIcon': '<i class="fa fa-upload"></i>&nbsp;',
		'browseLabel': '{{'Upload file'|trans}}'
	});

	target.find(".view-asset-button").click(function() {
		var parent = $(this).closest('.file-uploader-row');
		var sha1Input = $(parent).find(".sha1");
		var typeInput = $(parent).find(".type");
		var nameInput = $(parent).find(".name");
		var href = $(this).data('href').replace(/__SHA1__/g, sha1Input.val()).replace(/__MIME_TYPE__/g, typeInput.val()).replace(/__FILE_NAME__/g, nameInput.val());
		$(this).attr('href', href);
	});

	target.find(".extract-file-info").click(function() {
		var target = $(this).closest('.modal-content');
		FileDataExtrator(target);
	});

	target.find(".clear-asset-button").click(function() {
		var parent = $(this).closest('.file-uploader-row');
		var sha1Input = $(parent).find(".sha1");
		var typeInput = $(parent).find(".type");
		var nameInput = $(parent).find(".name");
		var progressBar = $(parent).find(".progress-bar");
		var progressText = $(parent).find(".progress-text");
		var progressNumber = $(parent).find(".progress-number");
		var previewTab = $(parent).find(".asset-preview-tab");
		var uploadTab = $(parent).find(".asset-upload-tab");
		var assetHashSignature = $(parent).find(".asset-hash-signature");
		var dateInput = $(parent).find(".date");
		var authorInput = $(parent).find(".author");
		var languageInput = $(parent).find(".language");
		var contentInput = $(parent).find(".content");
		var titleInput = $(parent).find(".title");

		$(parent).find(".file-uploader-input").val('');
		sha1Input.val('');
		assetHashSignature.empty();
		typeInput.val('');
		nameInput.val('');
		$(dateInput).val('');
		$(authorInput).val('');
		$(languageInput).val('');
		$(contentInput).val('');
		$(titleInput).val('');
		$(progressBar).css('width', '0%');
		$(progressText).html('');
		$(progressNumber).html('');
		previewTab.hide();
		uploadTab.show();
		$(parent).find('.view-asset-button').addClass('disabled');
		$(this).addClass('disabled');
		return false
	});

	target.find(".file-uploader-input").change(function(){
		initFileUploader($(this)[0].files[0], $(this).closest(".file-uploader-row"));
	});

	
	target.find(".file-uploader-row").each(function(){
		// file drop
		this.addEventListener("dragover", FileDragHover, false);
		this.addEventListener("dragleave", FileDragHover, false);
		this.addEventListener("drop", FileSelectHandler, false);
	});

	
	target.find(".ems-code-editor").each(function(){
		const codeDiv = $(this);
		var pre = codeDiv.find('pre').get(0);
		var hiddenField = codeDiv.find('input');
		var editor = ace.edit(pre);
		if(hiddenField.data('theme')){
    	    editor.setTheme(hiddenField.data('theme'));
		}
		if(hiddenField.data('language')){
    	    editor.session.setMode(hiddenField.data('language'));
		}
		var maxLines = 15;
		if(hiddenField.data('max-lines') && hiddenField.data('max-lines') > 0){
			maxLines = hiddenField.data('max-lines');
		}
		
		if(hiddenField.data('disabled')){
    		editor.setOptions({
    		    readOnly: true,
    		    highlightActiveLine: false,
    		    highlightGutterLine: false,
			    maxLines: maxLines
    		});
    		editor.renderer.$cursorLayer.element.style.opacity=0;
    		editor.textInput.getElement().tabIndex=-1;
    		editor.commands.commmandKeyBinding={};
		}
		else {
			editor.setOptions({
			    maxLines: maxLines
			});
		}
	    editor.on("change", function(e){
	    	hiddenField.val(editor.getValue());
	    	if(e.action == 'remove'){
    		    onFormChange();
		    }
		});

        editor.commands.addCommand({
            name: "fullscreen",
            bindKey: {win: "F11", mac: "Esc"},
            exec: function(editor) {
                if (codeDiv.hasClass('panel-fullscreen')) {
                    editor.setOption("maxLines", maxLines);
                    codeDiv.removeClass('panel-fullscreen');
                    editor.setAutoScrollEditorIntoView(false);
                }
                else {
                    editor.setOption("maxLines", Infinity);
                    codeDiv.addClass('panel-fullscreen');
                    editor.setAutoScrollEditorIntoView(true);
                }

                editor.resize();

            }
        });
	});
	

	target.find('.remove-content-button').on('click', function(e) {
		// prevent the link from creating a "#" on the URL
        e.preventDefault();
        
        var panel = $(this).closest('.collection-item-panel');
        panel.find('input._ems_internal_deleted').val('deleted');
        panel.hide();
        onFormChange();
	});

	target.find("input").keypress(onFormChange);
	target.find("input").change(onFormChange);
	target.find("select").change(onFormChange);
	target.find("textarea").keypress(onFormChange);

	target.find('.add-content-button').on('click', function(e) {
		// prevent the link from creating a "#" on the URL
        e.preventDefault();

        var panel = $(this).closest('.collection-panel');
        var index = panel.data('index');
		var prototype = panel.data('prototype');
     	// Replace '__name__' in the prototype's HTML to
        // instead be a number based on how many items we have
        var newForm = $(prototype.replace(/__name__/g, index));
     	// increase the index with one for the next item
        panel.data('index', index + 1);

        addEventListeners(newForm);

        panel.children('.panel-body').children('.collection-panel-container').append(newForm);
        onFormChange();
        
	});

	target.find('.ems-sortable > div').sortable({
		handle: ".ems-handle"
	});

	target.find('.selectpicker').selectpicker();

	target.find(".ckeditor_ems").each(function(index){

		{% if app.user.wysiwygProfile and app.user.wysiwygProfile.config %}
			var ckconfig = {{ app.user.wysiwygProfile.config|raw }};
		{% elseif app.user.wysiwygOptions %}
			var ckconfig = {{ app.user.wysiwygOptions|raw }};
        {% else %}
            var ckconfig = {};
		{% endif %}

		ckconfig.imageUploadUrl = ems_upload_url;
		ckconfig.imageBrowser_listUrl = ems_images_url;
	
		var height = $( this ).attr('data-height');
		if(!height){
			height = 400;
		}

		var format_tags = $( this ).attr('data-format-tags');
		if(format_tags){
			ckconfig.format_tags = format_tags;
		}
		
		var styles_set = $( this ).attr('data-styles-set');
		if(styles_set){
    		ckconfig.stylesSet = styles_set;
		}
		
		var content_css = $( this ).attr('data-content-css');
		if(content_css){
    		ckconfig.contentsCss = content_css;
		}


		ckconfig.height = height;
		ckconfig.div_wrapTable = 'true';

		//http://stackoverflow.com/questions/18250404/ckeditor-strips-i-tag
		//TODO: see if we could moved it to the wyysiwyg templates tools
		ckconfig.allowedContent = true;
		ckconfig.extraAllowedContent = 'p(*)[*]{*};div(*)[*]{*};li(*)[*]{*};ul(*)[*]{*}';
    	CKEDITOR.dtd.$removeEmpty.i = 0;

		
		if (!CKEDITOR.instances[$( this ).attr('id')]) {
			CKEDITOR.replace(this, ckconfig).on('key', onFormChange );
		}
		else {
			var editor = CKEDITOR.replace( $( this ).attr('id'), ckconfig);
		}
		

		//Set defaults that are compatible with bootstrap for html generated by CKEDITOR (e.g. tables)
		CKEDITOR.on( 'dialogDefinition', function( ev )
  		  {
  		     // Take the dialog name and its definition from the event data.
  		     var dialogName = ev.data.name;
  		     var dialogDefinition = ev.data.definition;

  		     // Check if the definition is from the dialog we're interested in (the "Table" dialog).
  		     if ( dialogName == 'table' )
  		     {
  		         // Get a reference to the "Table Info" tab.
  		         var infoTab = dialogDefinition.getContents( 'info' );
  		         
  		         var txtBorder = infoTab.get( 'txtBorder');
		         txtBorder['default'] = 0;
		         var txtCellPad = infoTab.get( 'txtCellPad');
		         txtCellPad['default'] = "";
  		       	 var txtCellSpace = infoTab.get( 'txtCellSpace');
  		         txtCellSpace['default'] = "";
  		       	 var txtWidth = infoTab.get( 'txtWidth' );
		         txtWidth['default'] = "";
		         
		         // Get a reference to the "Table Advanced" tab.
		         var advancedTab = dialogDefinition.getContents( 'advanced' );
		         
		         var advCSSClasses = advancedTab.get( 'advCSSClasses' );
		         advCSSClasses['default'] = "table table-bordered";
  		         
  		     }
  		   });

		
	});
	
	target.find(".objectpicker").each(function(index){
		var type = $( this ).data('type'); 
		var searchId = $( this ).data('search-id');
		const circleOnly = $( this ).data('circleOnly');
		var dynamicLoading = $( this ).data('dynamic-loading');
		var sortable = $( this ).data('sortable'); 

		var params = {
		  	escapeMarkup: function (markup) { return markup; }, // let our custom formatter work
		  	templateResult: formatRepo, // omitted for brevity, see the source of this page
		  	templateSelection: formatRepoSelection, // omitted for brevity, see the source of this page
		  	allowClear: true,
		  	//https://github.com/select2/select2/issues/3781
		  	placeholder: 'Select an object'
		};

		if($( this ).attr('multiple')) {
		  	params.closeOnSelect = false;
		}

		if(dynamicLoading){
		  	params.minimumInputLength = 1;
			params.ajax = {
				url: '{{ path("elasticsearch.api.search") }}',
		    	dataType: 'json',
		    	delay: 250,
		    	data: function (params) {
		      		return {
						q: params.term, // search term
						page: params.page,
						type: type,
                        searchId: searchId,
						circle: circleOnly !== undefined
			      };
			    },
				processResults: function (data, params) {
					// parse the results into the format expected by Select2
					// since we are using custom formatting functions we do not need to
					// alter the remote JSON data, except to indicate that infinite
					// scrolling can be used
					params.page = params.page || 1;
			
			      	return {
				        results: data.items,
				        pagination: {
				          more: (params.page * 30) < data.total_count
				        }
			      	};
		    	},
		    	cache: true
		  	};
		}

		var select2 = $( this ).select2(params);

		if(sortable){
    		var selectItem = $(this);
    		$(this).parent().find("ul.select2-selection__rendered").sortable({
    			stop: function( event, ui ) {
    				
    				//http://stackoverflow.com/questions/45888/what-is-the-most-efficient-way-to-sort-an-html-selects-options-by-value-while
    				var selected = selectItem.val();
    				var my_options = selectItem.find("option");
    				
    				var ul = $(this);
    				
    				my_options.sort(function(a,b) {
    					var indexA = ul.find("li[title='"+a.title.replace(/\'/g, "\\\'")+"']").index();
    					var indexB = ul.find("li[title='"+b.title.replace(/\'/g, "\\\'")+"']").index();

    				    if (indexA > indexB) return 1;
    				    if (indexA < indexB) return -1;
    				    return 0
    				});
    				selectItem.empty().append( my_options );
    				selectItem.val(selected);
    			}
    		});
		}
    });	
    
	target.find(".colorpicker-component").colorpicker();

	target.find(".colorpicker-component").bind('changeColor', onFormChange);

	target.find(".timepicker").each(function(index){

		var settings = {
	            showMeridian: 	$( this ).data('show-meridian'),
	            explicitMode: 	$( this ).data('explicit-mode'),
        		minuteStep: 	$( this ).data('minute-step'),
        		disableMousewheel: true,
        		defaultTime: false
		};

		$( this ).unbind( "change" );

// 		$( this ).on('change', function(event){
// 			console.log('hello');
// 			event.preventDefault();
// 		});

// 		var defaultTime = $( this ).data('default-time');
// 		//console.log( defaultTime !== false );
// 		if(defaultTime !== false) {
// 			if(defaultTime){
// 				settings.defaultTime = defaultTime;
// 			}
// 			else {
// 				settings.defaultTime = false;
// 			}
// 		}
		//console.log($( this ).val());

		//console.log(settings);
		$( this ).timepicker(settings).on('changeTime.timepicker', onFormChange);

		
// 		if(defaultTime === false && !$( this ).val() ) {
// 			$( this ).timepicker('setTime', new Date() );
// 		}
	});


	target.find('.datepicker').each(function( index ) {

		$(this).unbind('change');
		var params = {
			format: $(this).attr('data-date-format'),
			todayBtn: true,
			weekStart: $(this).attr('data-week-start'),
			daysOfWeekHighlighted: $(this).attr('data-days-of-week-highlighted'),
			daysOfWeekDisabled: $(this).attr('data-days-of-week-disabled'),
			todayHighlight: $(this).attr('data-today-highlight')
		}

		if($(this).attr('data-multidate') && $(this).attr('data-multidate') != 'false'){
			params.multidate = true;
		}

	  	$(this).datepicker(params)

	  	$(this).on('change', onFormChange);
	});

	target.find('.ems_daterangepicker').each(function( index ) {

		var options = $(this).data('display-option');
		$(this).unbind('change');
		
		$(this).daterangepicker(
			options, 
			function(start, end, label) {
// 				console.log(label);
				onFormChange();
			    //alert("A new date range was chosen: " + start.format('YYYY-MM-DD') + ' to ' + end.format('YYYY-MM-DD'));
			});
	});
}


$(window).ready(function() {

    updateChoiceFieldTypes();

	{% if stylesSets is defined %}
    	//Add custom styles sets (e.g for bootstrap (responsive tables, ...))
    	{% for stylesSet in stylesSets %}
        	CKEDITOR.stylesSet.add( 
        			'{{ stylesSet.name|e('js') }}', 
        			JSON.parse('{{ stylesSet.config|e('js') }}')
    			);
    	{% endfor %}
    {% endif %}

    
	CKEDITOR.plugins.addExternal('adv_link', '{{ asset("bundles/emscore/js/adv_link/plugin.js") }}', '' );
	CKEDITOR.plugins.addExternal('div', '{{ asset("bundles/emscore/js/div/plugin.js") }}', '' );
	addEventListeners($('form[name={{ form.vars.id }}]'));
});

$(document).keydown(function(e) {

    var key = undefined;
    var possible = [ e.key, e.keyIdentifier, e.keyCode, e.which ];

    while (key === undefined && possible.length > 0)
    {
        key = possible.pop();
    }

    if (key && (key == '115' || key == '83' ) && (e.ctrlKey || e.metaKey) && !(e.altKey))
    {
        e.preventDefault();
        onFormChange(e, true);
        return false;
    }
    return true;

});

window.onload = (function() {
	/** TODO:  quid d'un CKEditor ajoutÃ© au vol*/
	for (var i in CKEDITOR.instances) {
        CKEDITOR.instances[i].on('key', onFormChange );
	}
});

</script>

	{% if revision.draft %}
        {% include '@EMSCore/app/menu.html.twig' with {
			'item':  'data-draft-' ~ revision.contentType.id
		}%}
	{% else %}
        {% include '@EMSCore/app/menu.html.twig' with {
			'item':  'data-index-' ~ revision.contentType.id
		}%}
	{% endif %}
	
{% endblock %}	

