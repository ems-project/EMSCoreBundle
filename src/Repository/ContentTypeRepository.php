<?php

declare(strict_types=1);

namespace EMS\CoreBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NonUniqueResultException;
use EMS\CoreBundle\Entity\ContentType;

/**
 * ContentTypeRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ContentTypeRepository extends EntityRepository
{
    /**
     * @return ContentType[]
     */
    public function findAllAsAssociativeArray()
    {
        $qb = $this->createQueryBuilder('ct');
        $qb->where($qb->expr()->eq('ct.deleted', ':false'));
        $qb->setParameters([
            'false' => false,
        ]);

        $out = [];
        $result = $qb->getQuery()->getResult();
        /** @var ContentType $record */
        foreach ($result as $record) {
            $out[$record->getName()] = $record;
        }

        return $out;
    }

    /**
     * @return ContentType[]
     */
    public function findAll()
    {
        return parent::findBy(['deleted' => false], ['orderKey' => 'ASC']);
    }

    /**
     * @param string $name
     *
     * @return ContentType|null
     */
    public function findByName($name)
    {
        /** @var ContentType|null $contentType */
        $contentType = $this->findOneBy([
            'deleted' => false,
            'name' => $name,
        ]);

        return $contentType;
    }

    /**
     * @param int $id
     *
     * @return ContentType|null
     */
    public function findById($id)
    {
        /** @var ContentType|null $contentType */
        $contentType = $this->findOneBy([
            'id' => $id,
        ]);

        return $contentType;
    }

    /**
     * @throws NonUniqueResultException
     */
    public function countContentType(): int
    {
        return $this->createQueryBuilder('a')
         ->select('COUNT(a)')
         ->getQuery()
         ->getSingleScalarResult() ?? 0;
    }

    /**
     * @throws NonUniqueResultException
     */
    public function nextOrderKey(): int
    {
        $max = $this->createQueryBuilder('a')
         ->select('max(a.orderKey)')
         ->getQuery()
         ->getSingleScalarResult() ?? 0;

        return $max + 1;
    }
}
